using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.OData;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.OData.Edm;
using Microsoft.OData.ModelBuilder;
using Microsoft.OpenApi.Models;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using TeamsPersistanceCenter.Api.Controllers;
using TeamsPersistanceCenter.Api.Infrastructure.DbContext;
using TeamsPersistanceCenter.Api.Infrastructure.Helpers;
using TeamsPersistanceCenter.Managers.Interfaces;
using TeamsPersistanceCenter.Managers.Managers;
using TeamsPersistanceCenter.Models;

namespace TeamsPersistanceCenter
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {

            services.AddControllers()
                 .AddNewtonsoftJson(options =>
                 {
                     options.SerializerSettings.ConfigureDefaultJsonSerializerSettings();
                     options.SerializerSettings.Converters.Add(new StringEnumConverter());
                 })
                .AddOData(option =>
                {
                    option.Count().Filter().Expand().Select().OrderBy().SetMaxTop(50);
                    option.AddRouteComponents("odata/v1", GetEdmModel());
                });
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "TeamsPersistanceCenter", Version = "v1" });
                c.DocInclusionPredicate((name, api) => api.HttpMethod != null);

                // Locate the XML file being generated by ASP.NET
                var xmlFiles = Directory.GetFiles(AppContext.BaseDirectory, "TeamsPersistanceCenter.API.xml", SearchOption.TopDirectoryOnly);

                // Tell Swagger to use those XML comments.
                xmlFiles.ToList().ForEach(xmlFile => c.IncludeXmlComments(xmlFile));

                //c.AddSecurityDefinition("bearer",
                //    new OpenApiSecurityScheme
                //    {
                //        Type = SecuritySchemeType.Http,
                //        Scheme = "bearer",
                //        BearerFormat = "JWT",
                //        In = ParameterLocation.Header,
                //        Description = "Paste the auth token into value field",
                //    });
                //c.AddSecurityRequirement(new OpenApiSecurityRequirement
                //{
                //    {
                //        new OpenApiSecurityScheme
                //        {
                //            Reference = new OpenApiReference { Type = ReferenceType.SecurityScheme, Id = "bearer" }
                //        },
                //        new string[] {}
                //    }
                //});
            });
            services.AddDbContexts(Configuration);
            services.AddScoped<IUserManager, UserManager>();
            services.AddScoped<IAdministratorManager, AdministratorManager>();
            services.AddScoped<IAssignNumberManager, AssignNumberManager>();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseODataRouteDebug();
                app.UseODataQueryRequest();
                app.UseDeveloperExceptionPage();
                app.UseSwagger();
                app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "TeamsPersisitanceCenterAPI v1"));
            }

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }

        private static IEdmModel GetEdmModel()
        {
            var builder = new ODataConventionModelBuilder();
            builder.EnableLowerCamelCase();
            builder.EntitySet<User>(GetEntitySetName<UsersController>());

            builder.EntitySet<Administrator>(GetEntitySetName<AdminsController>());
            builder.EntitySet<AssignNumber>(GetEntitySetName<AssignNumberController>());

            return builder.GetEdmModel();
        }
        /// <summary>
        /// Define entity set name based on controller name
        /// </summary>
        /// <typeparam name="TController"></typeparam>
        /// <returns></returns>
        private static string GetEntitySetName<TController>()
        {
            // Try to get the entity set name from the controller name
            const string controllerNameSuffix = "Controller";
            var configurationName = typeof(TController).Name;
            var entitySetName = configurationName.Substring(0, configurationName.Length - controllerNameSuffix.Length);
            return entitySetName;
        }
    }
}
